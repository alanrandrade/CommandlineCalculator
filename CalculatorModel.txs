

TYPEDEF RangeOfInputs 
    ::= 
        CommutativeAdd { a1, a2 :: Int }
        | CommutativeMult {m1, m2 :: Int}
        | AddId {aid :: Int}
        | MultId {mid :: Int}
        | AddInverse {ai :: Int}
        | MultZero {mz :: Int}
        | AssocMult {ascm1, ascm2, ascm3 :: Int}
        | AssocAdd {asca1, asca2, asca3 :: Int}
        | DistrMultOverAdd {dma1, dma2, dma3 :: Int}
        | Quotient {q1, q2 :: Int}
        | MultInverse {mi :: Int}
        | PropF4 { af4, nf4 :: Int }


ENDDEF



PROCDEF stimResp [ Input :: RangeOfInputs; Output :: Int] () 
    ::=
        Input ? a [[ isCommutativeAdd(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()

        ##
        Input ? a [[ isCommutativeMult(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()

        ##
        Input ? a [[ isAddId(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()

        ##
        Input ? a [[ isMultId(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()

        ##
        Input ? a [[ isAddInverse(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()
        ##
        Input ? a [[ isMultZero(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()
        ##
        Input ? a [[ isAssocMult(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()
        ##
        Input ? a [[ isAssocAdd(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()
        ##
        Input ? a [[ isDistrMultOverAdd(a)  ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()
        ##
        Input ? a [[ isQuotient(a) /\  isDiffThanZero(q2(a)) ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()
        ##
        Input ? a [[ isMultInverse(a)  /\  isDiffThanZero(mi(a)) ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()
        ##
        Input ? a [[ isPropF4 (a) ]]
                >->
            Output ! (0)
                >->
            stimResp [ Input, Output] ()

ENDDEF


FUNCDEF equalityResult(expr :: RangeOfInputs) ::Int ::=
    LET exp1 = expToInt(expr); exp2 = expToInt(expr) IN
        IF exp1 > exp2 THEN
            1
        ELSE IF exp1 < exp2 THEN
            -1
        ELSE 
            0
        FI FI
    NI  
ENDDEF


-- FUNCDEF copyFirstExpToSec(inp :: RangeOfInputs) :: String ::=
--    IF isCommutativeAddMult(inp) THEN
--        toString(a1(inp)) ++ opToString(op(inp))++ toString(a2(inp)) ++ " = " ++ toString(a2(inp)) ++ opToString(Op(inp))++  toString(a1(inp))
--    ELSE
--        "exit()"
--    FI 
-- ENDDEF


-- FUNCDEF copyFirstArgsToSndExp(inp :: Exp) :: Exp ::=
--     IF isAdd(inp) THEN                                                          
--         Add( a1(a1(exp(inp) )), a2(a2( exp(inp))), a3(a2(exp(inp))), a4(a1(exp(inp))), op(op(exp(inp))) )
--        ELSE IF isMult(inp) THEN                                                          
--        Mult( m1(m11(exp(inp) )), m2(m2( exp(inp))), m3(m2(exp(inp))), m4(m1(exp(inp))) )
--        ELSE
--            inp    
--     FI FI
-- ENDDEF


 FUNCDEF inputToString(input :: RangeOfInputs) :: String ::=
    IF isCommutativeAdd(input) THEN
         toString(a1(input)) ++ " + " ++ toString(a2(input)) ++ " = " ++ toString(a2(input)) ++ " + " ++ toString(a1(input))
    ELSE IF isCommutativeMult(input) THEN
            toString(a1(input)) ++ " * " ++ toString(a2(input)) ++ " = " ++ toString(a2(input)) ++ " * " ++ toString(a1(input))
            ELSE IF isAddId(input) THEN
                toString(aid(input)) ++ " + 0 " ++ " = " ++ " 0 + " ++ toString(aid(input))
                ELSE IF isMultId(input) THEN
                    toString(mid(input)) ++ " * 1 " ++ " = " ++ " 1 * " ++ toString(mid(input))
                    ELSE IF isAddInverse(input) THEN
                        toString(ai(input)) ++  " + (" ++ addMinusSymb(ai(input))  ++ ")"++ " = 0"
                        ELSE IF isMultZero(input) THEN
                            toString(mz(input)) ++ " * " ++  "0" ++ " =  0 "
                            ELSE IF isAssocAdd(input) THEN
                                "(" ++ toString(asca1(input)) ++ " + " ++ toString(asca2(input)) ++  ") + " ++ toString(asca3(input))  ++  " = " ++ toString(asca1(input)) ++ " + (" ++ toString(asca2(input)) ++  " + " ++ toString(asca3(input)) ++ ")"
                                ELSE IF isAssocMult(input) THEN
                                    "(" ++ toString(ascm1(input)) ++ " + " ++ toString(ascm2(input)) ++  ") + " ++ toString(ascm3(input))  ++  " = " ++ toString(ascm1(input)) ++ " + (" ++ toString(ascm2(input)) ++  " + " ++ toString(ascm3(input)) ++ ")"
                                    ELSE IF isDistrMultOverAdd(input) THEN
                                        toString(dma1(input)) ++ " * (" ++ toString(dma2(input)) ++  " + " ++ toString(dma3(input))  ++  ") = " ++ toString(dma1(input)) ++ " * " ++ toString(dma2(input)) ++  " + " ++ toString(dma1(input)) ++" * " ++ toString(dma3(input))
                                        ELSE IF isQuotient(input) THEN
                                            toString(q1(input)) ++ " * ( 1" ++  " / " ++ toString(q2(input)) ++ ") = " ++ toString(q1(input)) ++ " / " ++ toString(q2(input))
                                            ELSE IF isMultInverse(input) THEN
                                                toString(mi(input)) ++ " * ( 1" ++  "/" ++ toString(mi(input)) ++ ") = " ++"1"
                                            ELSE IF isPropF4(input) THEN
                                                "(ln(" ++ toString(af4(input)) ++ "^" ++ toString(nf4(input)) ++ ")) = (" ++ toString(nf4(input)) ++ "* ln(" ++ toString(af4(input)) ++ "))" 
                                            ELSE
                                                ""
    FI FI FI FI FI FI FI FI FI FI FI FI
 ENDDEF



 

FUNCDEF addMinusSymb(val::Int) :: String ::= 
    IF val >= 0 THEN
        "-"++toString(val)
    ELSE
        toString( (val*(-1)) )
    FI
ENDDEF


FUNCDEF isDiffThanZero(val::Int) :: Bool ::=
    IF val <> 0 THEN
        True
    ELSE
        False
    FI
ENDDEF

        
FUNCDEF expToInt(exp::RangeOfInputs) :: Int ::=
    IF isCommutativeAdd(exp) THEN
        a1(exp) + a2(exp)
    ELSE IF isCommutativeMult(exp) THEN
            m1(exp) * m2(exp)
            ELSE IF isAddId(exp) THEN
                aid(exp) + 0
                ELSE IF isMultId(exp) THEN
                    mid(exp) * 1
                    ELSE IF isAddInverse(exp) THEN
                        ai(exp) * (-1)
                    ELSE IF isMultZero(exp) THEN
                        mz(exp) * 0
                        ELSE IF isAssocAdd(exp) THEN
                            asca1(exp) + asca2(exp) + asca3(exp)
                            ELSE IF isAssocMult(exp) THEN
                                ascm1(exp) *  ascm2(exp) * ascm3(exp)
                                ELSE IF isDistrMultOverAdd(exp) THEN
                                    dma1(exp) * (dma2(exp) + dma3(exp))
                                    ELSE IF isQuotient(exp) THEN
                                        q1(exp) * (1/q2(exp))
                                        ELSE IF isMultInverse(exp) THEN
                                            q1(exp) * (1/q1(exp))
                                        ELSE
                                        0
    FI FI FI FI FI FI FI FI FI FI FI  
ENDDEF



CHANDEF MyChannels ::=
    Input       :: RangeOfInputs ;
    Output    :: Int
ENDDEF

MODELDEF Model ::=
    CHAN IN    Input
    CHAN OUT   Output

    BEHAVIOUR  
        stimResp [Input,Output] ()
ENDDEF



CNECTDEF  Sut
    ::=
        CLIENTSOCK

        CHAN  OUT  Input            HOST "localhost"  PORT 7890
        ENCODE     Input ? a           ->  ! inputToString(a)
        
        CHAN  IN   Output            HOST "localhost"  PORT 7890
        DECODE     Output ! fromString(b)           <-   ? b
ENDDEF

