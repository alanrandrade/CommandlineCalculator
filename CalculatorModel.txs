

TYPEDEF RangeOfInputs 
    ::= 
        CommutativeAdd { a1, a2 :: Int }
        | CommutativeMult {m1, m2 :: Int}
        | AddId {aid :: Int}
        | MultId {mid :: Int}
        | AddInverse {ai :: Int}
        | MultZero {mz :: Int}
        | AssocMult {ascm1, ascm2, ascm3 :: Int}
        | AssocAdd {asca1, asca2, asca3 :: Int}
        | DistrMultOverAdd {dma1, dma2, dma3 :: Int}
        | Quotient {q1, q2 :: Int}
        | MultInverse {mi :: Int}
        | PropF2 {nf2 :: Int}
        | PropF3 {nf3 :: Int}
        | PropF4 { af4, nf4 :: Int }
        | PropF5 { af5, bf5 :: Int }
        | PropF6 {af6, bf6 :: Int}
        | PropF7 { af7, nf7 :: Int }
        | PropF8 {af8, bf8 :: Int}
        | PropF9 { af9, bf9 :: Int }
        | PropF10 {af10, bf10 :: Int}
        | PropF11 { af11, bf11 :: Int }
        | PropF12 {af12 :: Int}
        | PropF13 { af13, bf13, nf13 :: Int }
        | PropF14 {af14, bf14, nf14 :: Int}
        | PropF15 { af15, nf15 :: Int }

ENDDEF



PROCDEF calc [ Input :: RangeOfInputs; Output :: Int] () 
    ::=

        Input ? a [[ isValidInput(a)  ]]
                >->
            Output ! (0)
                >->
            calc [ Input, Output] ()
        


ENDDEF


FUNCDEF isValidInput(inp::RangeOfInputs) :: Bool ::=
 
    IF (isCommutativeAdd(inp) \/
        isCommutativeMult(inp) \/
        isAddId(inp) \/
        isMultId(inp) \/ 
        isAddInverse(inp) \/ 
        isMultZero(inp) \/ 
        isAssocMult(inp) \/
        isAssocAdd(inp) \/
        isDistrMultOverAdd(inp) \/ 
        (isQuotient(inp) /\  isDiffThanZero(q2(inp))) \/ 
        (isMultInverse(inp)  /\  isDiffThanZero(mi(inp))) \/
        isPropF2(inp) \/
        isPropF3(inp) \/
        (isPropF4 (inp) /\  (af4(inp) > 0)) \/
        (isPropF5 (inp) /\  (af5(inp)> 0) /\ (bf5(inp) > 0)) \/
        (isPropF6 (inp) /\  (af6(inp)> 0) /\ (bf6(inp) > 0) ) \/
        (isPropF7 (inp) /\ (af7(inp) > 0) ) \/
        (isPropF8 (inp) /\  ((af8(inp)> 0) /\ (bf8(inp) > 0))) \/
        (isPropF9 (inp) /\ (af9(inp) > 0) /\ (bf9(inp) > 0)) \/
        (isPropF10 (inp) /\  (af10(inp) >= 0) /\ (bf10(inp) >= 0)) \/
        (isPropF11 (inp) /\ (af11(inp) >= 0) /\ (bf11(inp) > 0)) \/
        (isPropF12 (inp) /\  (af12(inp) >= 0)) \/
        (isPropF13 (inp) /\ (( ( ( (nf13(inp) % 2) == 0)  /\ (af13(inp) >= 0)) /\ (bf13(inp) >= 0) ) \/ ((nf13(inp) %2 == 1) )) /\ ( ((nf13(inp) > 0)) \/ (((nf13(inp) < 0)) /\  (af13(inp) <> 0)  /\  (bf13(inp) <> 0))) /\  ((nf13(inp) % 2) <> 0)) \/
        (isPropF14 (inp) /\ (( ( ( (nf14(inp) % 2) == 0)  /\ (af14(inp) >= 0)) /\ (bf14(inp) >= 0) ) \/ ((nf14(inp) %2 == 1) )) /\ ( ((nf14(inp) > 0)) \/ (((nf14(inp) < 0)) /\  (af14(inp) <> 0)  /\  (bf14(inp) <> 0))) /\  ((nf14(inp) % 2) <> 0)) \/
        (isPropF15 (inp) /\ ( ((nf15(inp) % 2 == 0) /\ (nf15(inp) <> 0) /\ (af15(inp) >= 0) ) \/ (nf15(inp) % 2 == 1)) /\  (nf15(inp) <> 0))) THEN
        True
    ELSE
        False
    FI

ENDDEF



-- FUNCDEF copyFirstExpToSec(inp :: RangeOfInputs) :: String ::=
--    IF isCommutativeAddMult(inp) THEN
--        toString(a1(inp)) ++ opToString(op(inp))++ toString(a2(inp)) ++ " = " ++ toString(a2(inp)) ++ opToString(Op(inp))++  toString(a1(inp))
--    ELSE
--        "exit()"
--    FI 
-- ENDDEF


-- FUNCDEF copyFirstArgsToSndExp(inp :: Exp) :: Exp ::=
--     IF isAdd(inp) THEN                                                          
--         Add( a1(a1(exp(inp) )), a2(a2( exp(inp))), a3(a2(exp(inp))), a4(a1(exp(inp))), op(op(exp(inp))) )
--        ELSE IF isMult(inp) THEN                                                          
--        Mult( m1(m11(exp(inp) )), m2(m2( exp(inp))), m3(m2(exp(inp))), m4(m1(exp(inp))) )
--        ELSE
--            inp    
--     FI FI
-- ENDDEF



 FUNCDEF inputToString(input :: RangeOfInputs) :: String ::=
    IF isCommutativeAdd(input) THEN
         toString(a1(input)) ++ " + " ++ toString(a2(input)) ++ " = " ++ toString(a2(input)) ++ " + " ++ toString(a1(input))
    ELSE IF isCommutativeMult(input) THEN
            toString(a1(input)) ++ " * " ++ toString(a2(input)) ++ " = " ++ toString(a2(input)) ++ " * " ++ toString(a1(input))
            ELSE IF isAddId(input) THEN
                toString(aid(input)) ++ " + 0 " ++ " = " ++ " 0 + " ++ toString(aid(input))
                ELSE IF isMultId(input) THEN
                    toString(mid(input)) ++ " * 1 " ++ " = " ++ " 1 * " ++ toString(mid(input))
                    ELSE IF isAddInverse(input) THEN
                        toString(ai(input)) ++  " + (" ++ addMinusSymb(ai(input))  ++ ")"++ " = 0"
                        ELSE IF isMultZero(input) THEN
                            toString(mz(input)) ++ " * " ++  "0" ++ " =  0 "
                        ELSE IF isAssocAdd(input) THEN
                            "(" ++ toString(asca1(input)) ++ " + " ++ toString(asca2(input)) ++  ") + " ++ toString(asca3(input))  ++  " = " ++ toString(asca1(input)) ++ " + (" ++ toString(asca2(input)) ++  " + " ++ toString(asca3(input)) ++ ")"
                        ELSE IF isAssocMult(input) THEN
                            "(" ++ toString(ascm1(input)) ++ " + " ++ toString(ascm2(input)) ++  ") + " ++ toString(ascm3(input))  ++  " = " ++ toString(ascm1(input)) ++ " + (" ++ toString(ascm2(input)) ++  " + " ++ toString(ascm3(input)) ++ ")"
                            ELSE IF isDistrMultOverAdd(input) THEN
                                toString(dma1(input)) ++ " * (" ++ toString(dma2(input)) ++  " + " ++ toString(dma3(input))  ++  ") = " ++ toString(dma1(input)) ++ " * " ++ toString(dma2(input)) ++  " + " ++ toString(dma1(input)) ++" * " ++ toString(dma3(input))
                            ELSE IF isQuotient(input) THEN
                                toString(q1(input)) ++ " * ( 1" ++  " / " ++ toString(q2(input)) ++ ") = " ++ toString(q1(input)) ++ " / " ++ toString(q2(input))
                            ELSE IF isMultInverse(input) THEN
                                toString(mi(input)) ++ " * ( 1" ++  "/" ++ toString(mi(input)) ++ ") = " ++"1"
                                ELSE IF isPropF2(input) THEN
                                    "(log(10^" ++ toString(nf2(input)) ++ ")) =" ++ toString(nf2(input))
                                ELSE IF isPropF3(input) THEN
                                    "(ln(e^" ++ toString(nf3(input)) ++ ")) =" ++ toString(nf3(input))
                                ELSE IF isPropF4(input) THEN
                                    "(ln(" ++ toString(af4(input)) ++ "^" ++ toString(nf4(input)) ++ ")) = (" ++ toString(nf4(input)) ++ "* ln(" ++ toString(af4(input)) ++ "))" 
                                ELSE IF isPropF5(input) THEN
                                    "(ln(" ++ toString(af5(input)) ++ "*" ++ toString(bf5(input)) ++ ")) = (ln(" ++ toString(af5(input)) ++ ")+ ln(" ++ toString(bf5(input)) ++ "))" 
                                ELSE IF isPropF6(input) THEN
                                    "(ln(" ++ toString(af6(input)) ++ "/" ++ toString(bf6(input)) ++ ")) = (ln(" ++ toString(af6(input)) ++ ")) - (ln(" ++ toString(bf5(input)) ++ "))" 
                                    ELSE IF isPropF7(input) THEN
                                    "(log(" ++ toString(af7(input)) ++ "^" ++ toString(nf7(input)) ++ ")) = " ++ toString(nf7(input)) ++ "* log(" ++ toString(af7(input)) ++ "))"
                                    ELSE IF isPropF8(input) THEN
                                        "(log(" ++ toString(af5(input)) ++ "*" ++ toString(bf5(input)) ++ ")) = (log(" ++ toString(af8(input)) ++ "))+ (log(" ++ toString(bf8(input)) ++ "))" 
                                         ELSE IF isPropF9(input) THEN
                                            "(log(" ++ toString(af9(input)) ++ "/" ++ toString(bf9(input)) ++ ")) = (log(" ++ toString(af9(input)) ++ ") - log(" ++ toString(bf9(input)) ++ "))"
                                        ELSE IF isPropF10(input) THEN
                                            "(sqrt(" ++ toString(af10(input)) ++ "*" ++ toString(bf10(input)) ++ ")) = (sqrt(" ++ toString(af10(input)) ++ ")) * (sqrt(" ++ toString(bf10(input)) ++ "))"
                                        ELSE IF isPropF11(input) THEN
                                            "(sqrt(" ++ toString(af11(input)) ++ "/" ++ toString(bf11(input)) ++ ")) = (sqrt(" ++ toString(af11(input)) ++ ") / sqrt(" ++ toString(bf11(input)) ++ "))"
                                        ELSE IF isPropF12(input) THEN
                                            "(sqrt(" ++ toString(af12(input)) ++ ")) * (sqrt(" ++ toString(af12(input)) ++ ")) = "++ toString(af12(input)) 
                                        ELSE IF isPropF13(input) THEN
                                            "(root(" ++ toString(af13(input)) ++ "*" ++ toString(bf13(input)) ++ "," ++ toString(nf13(input)) ++ ")) = (root(" ++ toString(af13(input)) ++ "," ++ toString(nf13(input)) ++ ") * root(" ++ toString(bf13(input)) ++ "," ++ toString(nf13(input)) ++ "))"
                                        ELSE IF isPropF14(input) THEN
                                            "(root(" ++ toString(af14(input)) ++ "/" ++ toString(bf14(input)) ++ "," ++ toString(nf14(input)) ++ ")) = (root(" ++ toString(af14(input)) ++ "," ++ toString(nf14(input)) ++ ") / root(" ++ toString(bf14(input)) ++ "," ++ toString(nf14(input)) ++ "))"
                                        ELSE IF isPropF15(input) THEN
                                            "(root("++ toString(af15(input)) ++ "," ++ toString(nf15(input)) ++ ") ^ "++ toString(nf15(input))  ++ ") = " ++ toString(af15(input))
                                        ELSE
                                            ""
    FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI

 ENDDEF


FUNCDEF addMinusSymb(val::Int) :: String ::= 
    IF val >= 0 THEN
        "-"++toString(val)
    ELSE
        toString( (val*(-1)) )
    FI
ENDDEF


FUNCDEF isDiffThanZero(val::Int) :: Bool ::=
    IF val <> 0 THEN
        True
    ELSE
        False
    FI
ENDDEF

        

CHANDEF MyChannels ::=
    Input       :: RangeOfInputs ;
    Output    :: Int
ENDDEF

MODELDEF Model ::=
    CHAN IN    Input
    CHAN OUT   Output

    BEHAVIOUR  
        calc [Input,Output] ()
ENDDEF



CNECTDEF  Sut
    ::=
        CLIENTSOCK

        CHAN  OUT  Input            HOST "localhost"  PORT 7890
        ENCODE     Input ? a           ->  ! inputToString(a)
        
        CHAN  IN   Output            HOST "localhost"  PORT 7890
        DECODE     Output ! fromString(b)           <-   ? b
ENDDEF

